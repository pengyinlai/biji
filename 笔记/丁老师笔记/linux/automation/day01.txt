准备6台虚拟机
control	192.168.4.253/24
node1	192.168.4.11/24
node2	192.168.4.12/24
node3	192.168.4.13/24
node4	192.168.4.14/24
node5	192.168.4.15/24

在control主机操作：
#修改主机名解析文件
[root@control ~]# dnf -y install  vim
[root@control ~]# vim  /etc/hosts
… …
192.168.4.253	control  
192.268.4.1	node1    
192.168.4.2	node2    
192.168.4.3	node3    
192.168.4.4	node4    
192.168.4.5	node5    

#生成ssh密钥，实现无密码连接所有node主机
[root@control ~]#  ssh-keygen  -f  /root/.ssh/id_rsa   -N  ''
[root@control ~]#  for i in node1 node2 node3 node4 node5
do
      ssh-copy-id   $i
done

#安装ansible软件包
[root@control ~]# tar  -xf   ansible_soft.tar.gz
[root@control ~]# cd ansible_soft
[root@control ansible_soft]# dnf  -y  install  *


#创建ansible的配置文件
#(可以参考/etc/ansible/ansible.cfg)
[root@control ~]# mkdir  ~/ansible
[root@control ~]# vim  ~/ansible/ansible.cfg
[defaults]
inventory = ~/ansible/hosts    #被控制端主机清单
#forks = 5                     #ssh并发数量
#ask_pass = True               #使用密钥还是密码远程
#host_key_checking = False     #是否校验密钥

#创建一个被控制端主机的清单文件
#[参考/etc/ansible/hosts]
[root@control ~]# vim  ~/ansible/hosts
[test]             	#定义主机组（组名称任意）
node1               #定义组中的具体主机
[proxy]				#定义一个组名称叫proxy[任意字符]
node2				#这个组里有一台主机node2
[webserver]			#定义一个webserver组
node[3:4]			#在这个组里有两台主机node3和node4
[database]
node5
[cluster:children]  #嵌套组（children为关键字）
webserver
database
#嵌套组就是在组中包含其他组


++++++++++++++++++++++++++++++++++++++++++++
使用ansible管理其他主机
++++++++++++++++++++++++++++++++++++++++++++
使用ansible管理其他主机有两种方式:
1.命令行执行ansible ad-hoc命令
2.把要做的动作行为写入一个文件[playbook剧本]
  ansible读取剧本自动完成相应的任务.



Ansible ad-hoc是一种通过命令行批量管理的方式，
命令基本格式如下：
# ansible 主机集合 -m 模块名 -a "参数" 
其他参数：-k使用密码远程、-i指定主机列表文件
#-m后面加模块[module]
#-a后面是给模块传递参数[argument]


####  注意事项  ####
执行ansible命令一定要先cd到ansible目录
####  注意事项  ####

[root@control ~]# cd ~/ansible
[root@control ansible]# ansible all --list-host
#all是ansible自带的已经定义好的特殊的组，所有主机都在这个组中.


第一个ansible模块【ping模块】
[root@control ansible]# ansible node1 -m ping
#可以使用单独的某一台主机的域名
[root@control ansible]# ansible test -m ping
#也可以使用hosts中定义的组名称
[root@control ansible]# ansible webserver -m ping
[root@control ansible]# ansible all -m ping

#################################
失败检查:
检查/etc/hosts
检查~/ansible/ansible.cfg
检查~/ansible/hosts
#################################

多数脚本都支持参数，默认模块为command。
[root@control ansible]# ansible  node1  -m  command  -a   "uptime"
[root@control ansible]# ansible  node1  -m command -a  "uname -r"
[root@control ansible]# ansible  node1  -m command -a  "ip a s eth0"
[root@control ansible]# ansible  node1   -a   "ip a s eth0"
[root@control ansible]# ansible  all   -a   "date"
#注意这里的网卡名称可能不一样!


通过ansible-doc获取帮助。
[root@control ansible]# ansible-doc -l				#列出所有模块
[root@control ansible]# ansible-doc -l | wc -l
[root@control ansible]# ansible-doc command			#查看具体模块的帮助


command和shell模块的区别，command模块的命令不启动shell,直接通过ssh执行命令，command不支持bash的特性，如管道和重定向等功能，所有需要调用shell的功能都无法使用。不可以使用shell模块执行交互命令，如vim、top等。

[root@control ansible]# ansible test -m command -a "ps | wc -l"         #报错
[root@control ansible]# ansible test -m command -a  "ls &"               #报错
[root@control ansible]# ansible test -m shell -a  "ps aux | wc -l"       #进程数量
[root@control ansible]# ansible test -m shell -a  "who"                   #登陆信息
[root@control ansible]# ansible test -m shell -a  "touch /tmp/txt.txt"


注意：Ansible使用SSH远程连接被管理主机，退出SSH后所有状态失效。
[root@control ansible]# ansible test -m shell -a "cd /tmp"                 
#切换目录
[root@control ansible]# ansible test -m shell -a "touch my.txt"      
#创建文件（注意：没有指定路径，是在家目录创建的文件）
[root@control ansible]# ansible test -m shell -a "ls /tmp/my.txt"        
#查看文件失败


[root@control ansible]# ansible test -m shell -a "chdir=/tmp  touch b.txt"   
#使用chdir参数切换工作目录


shell模块支持判断(creates、removes），格式如下：
creates 文件名：文件存在，不执行shell命令，
removes 文件名：文件不存在，不执行shell命令。


[root@control ansible]# ansible test -m shell -a "touch /tmp/b.txt creates=/tmp/b.txt"
#ansible会远程test主机，判断目标主机有没有/tmp/b.txt文件
#如果有该文件则ansible对应的shell命令不执行
#如果没有该文件则ansible对应的shell命令执行


假设我有一个xx.zip压缩包
#ansible test  -m  shell  -a "unzip  /root/xx.zip"
#远程test主机，执行unzip命令解压一个压缩包文件

#ansible test  -m  shell  -a "unzip  /root/xx.zip removes=/bin/unzip"
#ansible会远程test主机，判断目标主机有没有/bin/unzip程序
#如果没有这个程序，则不执行shell对应的命令
#如果有这个程序，则执行对应的shell命令


#######################
    script模块
#######################

在控制端主机可以任意写脚本,ansible自动远程被管理端主机，拷贝这个脚本，到目标主机执行这个脚本.
[root@control ansible]# vim /root/test.sh 
#!/bin/bash
dnf -y install httpd
systemctl start httpd

[root@control ansible]# ansible test -m script -a "/root/test.sh"


##################
   file模块
##################
file模块可以创建文件、目录、链接；修改权限与属性等
很多ansible模块都具有【幂等性】的特征。
幂等性：任意次执行所产生的影响均与一次执行的影响相同。

[root@control ansible]# ansible  test  -m  file  \
-a  "path=/tmp/file.txt state=touch"         #新建文件
[root@control ansible]# ansible  test  -m  file  \
-a  "path=/tmp/mydir state=directory"       
#创建目录

[root@control ansible]# ansible  test  -m  file \
-a  "path=/tmp/file.txt owner=sshd group=adm mode=0777"  
#修改文件或目录权限
#owner=sshd是修改文件的所有者【sshd是用户名】
#group=adm是修改文件的所属组【adm是组名】
#mode=0777是修改文件的权限


[root@control ansible]# ansible test -m file \
-a "path=/tmp/mydir  state=absent"
#state=absent是删除文件或目录

[root@control ansible]# ansible test -m file \
-a "path=/tmp/file.txt  state=absent"
#state=absent是删除文件或目录


[root@control ansible]# ansible test -m file \
-a "src=/etc/hosts  path=/tmp/host.txt state=link"  
#给/etc/hosts文件创建一个链接文件/tmp/host.txt



#############
copy模块
#############
拷贝文件的模块

[root@control ~]# cd ansible
[root@control ansible]# echo AAA > ~/a3.txt   #新建测试文件
[root@control ansible]# ansible test -m copy \
-a "src=~/a3.txt dest=/root/"
#src是源文件，dest是目标文件

[root@control ansible]# echo BBB > ~/a3.txt
#修改a3.txt文件
[root@control ansible]# ansible test -m copy \
-a "src=~/a3.txt dest=/root/"
#因为内容修改了，会重新拷贝一次.


[root@control ansible]# echo CCC > ~/a3.txt
#再次修改文件内容

#copy模块可以将文件拷贝到远程主机，如果目标主机有同名文件时，通过定义backup=yes则先备份再拷贝。

[root@control ansible]# ansible test -m copy \
-a "src=~/a3.txt dest=/root/a3.txt backup=yes"


#################
fetch模块
#################
把被管理端主机的文件拷贝过来到ansible管理主机
fetch模块与copy类似，但是作用相反,可以将其他主机的文件拷贝到本地。

[root@control ansible]# ansible all -m fetch \
-a "src=/etc/hostname dest=/tmp"
#把所有5台被管理端主机的hostname文件拷贝到本机的/tmp目录


###########################
在修改单个文件的单行内容时可以使用lineinfile模块。
###########################
[root@control ansible]# ansible test -m lineinfile  \
-a "path=/etc/issue line='hello world'"
#在/etc/issue文件中添加一行内容hello world，默认添加到最后

[root@control ansible]# ansible test -m lineinfile \
-a "path=/etc/issue line='helle world'"
#基于幂等原则，重复执行，不会创建多行内容


[root@control ansible]# ansible test -m lineinfile \
-a "path=/etc/issue line='insert' insertafter='Kernel'"
#将内容插入到Kernel行的后面


[root@control ansible]# ansible test -m lineinfile \
-a "path=/etc/issue regexp='hello' line='ni hao'"
#在/etc/issue文件中正则匹配包含hello的行，把整行内容替换为ni hao
#如果无法匹配到hello，则在文件最后添加一行nihao
#如果有多行内容包含hello，则仅替换最后一行


################################
replace模块可以替换所有关键词
################################
[root@control ansible]# ansible test -m replace \
-a "path=/etc/issue.net regexp=Kernel replace=Ocean"
#将/etc/issue文件全文所有的Kernel替换为Ocean


###########################
user模块
###########################

[root@control ansible]# ansible test -m user \
-a "name=tuser1"
#远程test组中的所有主机并创建系统账户tuser1


[root@control ansible]# ansible test -m user -a \
"name=tuser2 uid=1010 group=adm groups=daemon,root \
  home=/home/tuser2"
#创建账户并设置对应的账户属性
#uid设置用户ID
#group设置用户的基本组
#groups设置用户的附加组
#home指定用户的家目录
#在linux中可以用户信息cat /etc/passwd
#在linux中查看组信息cat /etc/group    


[root@control ansible]# ansible test -m user -a \
 "name=tuser1 \
 password={{'abc'| password_hash('sha512')}}"
#修改账户密码,密码是abc，密码需要经过sha512算法加密
#给tuser1用户修改密码
#password_hash的意思是密码要加密
#sha512是加密的算法

[root@control ansible]# ansible test -m user \
-a "name=tuser1 groups=root,daemon"
#修改tuser1账户的附加组



[root@control ansible]# ansible test -m user \
-a "name=tuser1 state=absent"
#删除账户tuser1
[root@control ansible]# ansible test -m user \
-a "name=tuser2 state=absent remove=true"
#删除tuser2账户同时删除家目录、邮箱


###########################
yum_repository模块
###########################
创建yum配置文件的模块(/etc/yum.repos.d/文件)


[root@control ansible]# ansible test -m yum_repository \
-a "name=myyum description=hello \
baseurl=ftp://192.168.4.254/centos \
gpgcheck=no"

#新建一个yum源配置文件/etc/yum.repos.d/myyum.repo
#yum源文件名为myyum，该文件的内容如下：
[myyum]
baseurl = ftp://192.168.4.254/centos
gpgcheck = 0
name = hello

[root@control ansible]# ansible test \
-m yum_repository -a "name=myyum state=absent"
#删除上面创建的myyum这个yum配置文件.




######################
yum模块
######################
#管理软件包的模块，安装，卸载，升级... ...
state: present(安装)|absent(卸载)|latest(升级)。


[root@control ansible]# ansible test -m yum \
-a "name=unzip state=present"
#安装unzip软件包
[root@control ansible]# ansible test -m yum \
-a "name=unzip state=latest"
#升级unzip软件包，软件名称可以是*，代表升级所有软件包
[root@control ansible]# ansible test -m yum \
-a "name=unzip state=absent"
#卸载unzip软件包

#提示：如果name指定的软件名称是以@开始，则代表组包.



##########################
service模块
##########################
service为服务管理模块（启动、关闭、重启服务等），
state:started|stopped|restarted，
enabled:yes设置开机启动。


[root@control ansible]# ansible test -m yum \
-a "name=httpd"
#使用yum模块安装软件包

[root@control ansible]# ansible test -m service \
-a "name=httpd state=started"
#启动httpd服务
[root@control ansible]# ansible test -m service \
-a "name=httpd state=stopped"
#关闭httpd服务
[root@control ansible]# ansible test -m service \
-a "name=httpd state=restarted"
#重启httpd服务
[root@control ansible]# ansible test -m service \
-a "name=httpd enabled=yes"
#设置httpd为开机自启动



#准备实验环境:（在node1主机操作）
#关闭node1这台虚拟机,
#在vmware设置里面给这台虚拟机添加一块磁盘
#重启虚拟机，使用lsblk查看是否有磁盘
[root@node1 ~]# lsblk
[root@node1 ~]# parted /dev/sdb mklabel gpt
#parted  硬盘名称   mklabel  分区表类型(mrb或者gpt)
[root@node1 ~]# parted /dev/sdb mkpart primary 1 2G
#parted  硬盘名称   mkpart  primary  分区开始位置 结束位置
#mkpart是创建分区,primary是主分区
[root@node1 ~]# lsblk

#注意事项：每个同学的硬盘名称可能不同，注意根据情况修改



##########################
lvg模块:
##########################
创建、删除卷组(VG)，修改卷组大小，
state:present(创建)|absent(删除)。


[root@control ansible]# ansible test -m yum -a "name=lvm2"
#安装lvm2软件包

[root@control ansible]# ansible test -m lvg -a "vg=myvg pvs=/dev/sdb1"
#调用lvg模块
#vg=是需要创建的VG名称
#PVS=是指定由那个磁盘或分区创建VG


【在node1主机再给磁盘分一个区】
[root@node1 ~]# parted /dev/sdb mkpart primary 2G 4G

【在control主机通过ansible给node1的myvg卷组扩容】
[root@control ansible]# ansible test -m lvg -a "vg=myvg pvs=/dev/sdb1,/dev/sdb2"



#######################
lvol模块
#######################
创建、删除逻辑卷(LV)，修改逻辑卷大小，
state:present(创建)|absent(删除)。

[root@control ansible]# ansible test -m lvol \
-a "lv=mylv vg=myvg size=1G"
#调用lvol模块创建逻辑卷
#lv=指定逻辑卷的名称
#vg=指定卷组的名称
#size=指定逻辑卷的大小

[root@control ansible]# ansible test -m lvol \
-a "lv=mylv vg=myvg size=2G"
#把前面创建的逻辑卷mylv扩容到2G容量.

[root@control ansible]# ansible test -m lvol \
-a "lv=mylv vg=myvg state=absent force=yes"
#删除前面创建的逻辑卷mylv
[root@control ansible]# ansible test -m lvg -a "vg=myvg state=absent"
#删除前面创建的卷组myvg










