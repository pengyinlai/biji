用户授权

【创建 grant 授权】
授权： 添加用户并设置权限
grant 授权列表  on  库名 to 用户名@“客户端地址”
identified by “密码” 			//授权用户密码
with grant option 			//有授权权限  可选项

案例 grant all on db4.* to yaya@"%" identified by "123445" ;


【登录用户操作命令】
select user();									//显示登录用户名及客户端登录地址
show grants；									//显示登录用户自身访问权限
show grants for 用户名@“客户端地址”				//管理员查看已有授权用户权限
set password = password("密码");				//授权用户连接后修改连接密码
set password for ”用户名“= password（“密码”）； //管理员重置授权用户连接密码
drop user 用户名@“客户端地址”				    //删除授权用户（必须有管理员权限）
select user, host, from mysql.user ;            //先查看用户名 和登录的客户端辅助删除用户

【mysql库 记录授权信息 主要表如下】
- user表				//记录已有的授权用户及权限 地址
- db表					//记录已有的授权用户对数据库的访问权限
- tables_priv表			//记录已有的授权用户对表的访问权限
- columns_priv表		//记录已有授权用户对字段的访问权限
#查看表记录可以获取用户权限；也可以通过更新记录	修改权限


flush privileges		//更新数据库 让操作生效


【撤销权限】
revoke 权限列表 on 库名.表 from  用户名@“客户端地址”；

select user , host from mysql.user; 					//查看一下已有的授权用户
mysql> show grants for mydba@"%"; 			  			//查看授权用户的权限
mysql> revoke  all  on  *.* from mydba@"%" ;  			//撤销剩下的所有权限
mysql> revoke grant option on *.* from  mydba@"%" ;  	//撤销授权权限
mysql> revoke  create , drop  on  *.* from mydba@"%" ;  //仅撤销某个权限
select  * from mysql.user where user="mydba" \G  		//授权库的记录也会自动改变
drop user mydba@"%";      								//删除授权的用户



【管理员密码】

知道密码的时候修改密码
[root@mysql50 ~]# mysqladmin -hlocalhost -uroot -p旧密码   password "新密码"
[root@mysql50 ~]# mysqladmin -hlocalhost -uroot -pabc123   password "666888"


恢复数据库管理员root 本机登陆密码
步骤如下：
1. systemctl stop mysqld		//停止MySQL服务程序
vim /etc/my.cnf 
skip-grant-tables				//跳过授权表启动MySQL服务程序
#validate_password_policy=0
#validate_password_length=6
mysql
select host , user , authentication_string from mysql.user;	//查看user表
update mysql.user  set  authentication_string=password("123qqq...A") 
    -> where  host="localhost" and user="root" ;	//修改root密码
flush privileges;	//刷新系统

4. 以正常方式重启MySQL服务程序




【数据备份-完全备份-物理备份】
tar  -zcf /opt/mysql.tar.gz  /var/lib/mysql/*			//打包备份的数据库文件
scp -r /opt/mysql.tar.gz 新的主机IP地址：/opt/			//拷贝备份文件到目标主机
tar -xf /opt/mysql.tar.gz -C /opt/				//解包
rm -rf  /var/lib/mysql/*
cp -r /opt/*  /var/lib/mysql/					//把备份文件考到目标路径
systemctl restart mysqld						//重启服务



【数据完全备份】
语法：
]# mysqldump   -uroot    -p密码    库名  >  目录/xxx.sql
库名表示方式：
--all-databases 或  -A      //所有库
数据库名					//单个库
数据库名  表名          	//单张表
-B  数据库1  数据库2 		//多个库

备份：
mkdir /bak
mysqldump -uroot -p123bbb...A  --all-databases  > /bak/all.sql	//备份全部库
mysqldump -uroot -p123bbb...A  db1  > /bak/db1.sql				//备份单个库
mysqldump -uroot -p123bbb...A  db1 t28  > /bak/db1_t28.sql		//备份库下的单个表
mysqldump -uroot -p123bbb...A   -B db1 db3  > /bak/twodb.sql	//同时备份两个库

【恢复数据的命令】 
命令格式：
mysql  -uroot    -p密码   [ 库名 ]   <   目录/xxx.sql
mysql -uroot -p123bbb...A  <  /opt/all.sql			//恢复整个库的数据
mysql -uroot -p123bbb...A  db1 < /opt/db1.sql 		//恢复单个库的数据（如果库不存在 恢复就会失败 需要提前新建库）
mysql -uroot -p123bbb...A  -e 'create database db1' // 在命令行创建库
mysql -uroot -p123bbb...A  db1  < /opt/db1.sql 		


在命令行操作数据库命令参数 ”-e“  
mysql -uroot -p123bbb...A  -e 'create database db1'




【数据增量备份与恢复】


实现方法1 启用binlog日志文件

日志介绍（什么是binlog日志文件）
日志的使用：
启用日志
show master status;  //查看binlog.sql 是否启用

]# /etc/my.cnf
[mysqld]
binlog_format=“mixed”		//修改变量混合模式
log_bin						//启用binlog日志文件
server_id=50				//这号自定义一般用本主机IP地址的最后三位/两位
log_bin=/mylog/db50			//自定义日志闻乐见存储目录和名称
mysqlbinlog  日志文件路径	//查看日志文件内容

mysqlbinlog /var/lib/mysql/mysql50-bin.000001		//查看日志文件的内容
cat /var/lib/mysql/mysql50-bin.index  				//查看索引文件的内容

生成新的日志文件
1） systemctl restart mysqld			//重启服务生成新的日志文件
2） mysql> flush logs ;					//在mysql 命令行生成新的日志文件
3） mysql -uroot -p123bbb -e ”flush logs“ //在linux 命令行生成新的日志文件
4） mysqldump -uroot -p123bbb --flush logs db1 > db1.sql  //在备份ku 的时候生成新的日志文件

删除日志文件
1）mysql> purge master logs to "db50.000002"   //删除标号2之前的文件
2）mysql> reset master ;						//清空所有的日志文件				
利用日志文件恢复数据内容
mysqlbinlog  日志文件路径  | mysql -uroot -p密码    //恢复日志文件


利用日志文件恢复一段时间/有选择的恢复数据内容
1)修改变量的binlog_format   的显示方式
在配置文件中添加
binlog_format="" 常用的是三个值 //statement 报表模式 （可以看懂）
								//row 行模式（看不懂）
								//mixed 混合模式 （可以看懂）

按照偏移量恢复数据（查看binlog日志得到偏移前的字号/偏移后字号）最后的字号可以不用写
mysqlbinlog --start-datetime="2020/05/20 22:14:05" --stop-datetime="2020/05/20 22:14:05"  /root/db50.000001  | mysql -uroot -p123qqq...A
按照时间段恢复数据（查看binlog日志得到命名执行前时间/后时间）最后的时间可以不用谢
mysqlbinlog --start-position=298 --stop-position=1256  /root/db50.000001  | mysql -uroot -p123qqq...A

















